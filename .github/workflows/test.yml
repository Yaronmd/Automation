name: API And Selenium Tests

on:
  push:
    branches:
      - main  # Run on push to the main branch
  pull_request:
    branches:
      - main  # Run on pull requests to the main branch
  schedule:
    - cron: "0 2 * * *"  # Run daily at 2:00 AM (UTC)

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Docker
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # Step 3: Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version  # Verify installation

      # Step 4: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.13'  # specify the version of Python you want to use

      # Step 5: Install Poetry
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -

      # Step 6: Install dependencies using Poetry
      - name: Install dependencies
        run: |
          poetry install
  

      # Step 7: Set up and run Selenium with Docker Compose
      - name: Set up and run Selenium with Docker Compose
        run: |
          docker-compose -f docker-compose.yml up -d  # Start Selenium Hub and Node

      # Step 8: Wait for Selenium Hub to be ready
      - name: Wait for Selenium Hub to be ready
        run: |
              timeout=120  # Max wait time in seconds (2 minutes)
              start_time=$(date +%s)  # Get current time in seconds

              while :; do
                # Check if the Selenium Hub is ready
                curl -s http://localhost:4444/wd/hub/status | grep '"ready": true' && break
                
                # Calculate elapsed time
                elapsed_time=$(( $(date +%s) - start_time ))

                # If the timeout is reached, exit with error
                if [ $elapsed_time -ge $timeout ]; then
                  echo "Selenium Hub did not become ready within the timeout period."
                  exit 1
                fi

                # Wait for a while before retrying
                echo "Waiting for Selenium Hub to be ready..."
                sleep 5
              done
      

      # Step 9: Run tests with pytest
      - name: Run tests
        run: |
          poetry run pytest -s tests/ --maxfail=1 --disable-warnings --alluredir allure-results

      - name: Verify Allure results
        run: ls -R allure-results

      # Step 10: Tear down Selenium services
      - name: Tear down Selenium
        run: |
          docker-compose -f docker-compose.yml down  # Stop Selenium services


      # Step 12: Install Allure CLI
      - name: Install Allure CLI
        run: |
          mkdir -p allure
          curl -o allure.zip -L https://github.com/allure-framework/allure2/releases/download/2.32.0/allure-2.32.0.zip
          unzip allure.zip -d allure
          sudo ln -s $PWD/allure/allure-2.32.0/bin/allure /usr/local/bin/allure
          allure --version  # Verify Allure is installed
          
      - name: Pull Allure History from GitHub Pages
        if: always()
        run: |
          curl -L -o gh-pages.zip https://github.com/Yaronmd/Automation/archive/refs/heads/gh-pages.zip
          unzip -o gh-pages.zip
          mkdir -p allure-results/history
          cp -r Automation-gh-pages/history allure-results/ || true
          echo "History folder copied to allure-results."
      # Step 13: Generate and Publish Allure Report
      - name: Generate Allure Report
        run: |
          allure generate allure-results -o allure-report --clean

      - name: Copy History Back to Allure Report
        run: |
          cp -r allure-results/history allure-report/ || true

      # Step 14: Upload Allure Report as an artifact
      - name: Upload Allure Report
        uses: actions/upload-artifact@v3
        with:
          name: allure-report
          path: allure-report
      # Step 15: Deploy the Allure Report to GitHub Pages
      - name: Deploy Allure Report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-report
          user_name: 'github-actions'
          user_email: 'github-actions@github.com'